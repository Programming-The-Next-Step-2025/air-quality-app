library(appforair)
getwd()
library(appforair)
git init
shiny::runApp('R')
startApp <- function() {
air_data <- read.csv("inst/extdata/openaq.csv", sep = ";", stringsAsFactors = FALSE)
coords <- strsplit(air_data$Coordinates, ",")
lat <- sapply(coords, function(x) as.numeric(x[1]))
lon <- sapply(coords, function(x) as.numeric(x[2]))
air_data$Latitude <- lat
air_data$Longitude <- lon
air_data$LastUpdated <- as.POSIXct(air_data$Last.Updated, format = "%Y-%m-%dT%H:%M:%S", tz = "UTC")
pm25_data <- air_data[air_data$Pollutant == "PM2.5", ]
pm25_data <- pm25_data[!is.na(pm25_data$City), ]
city_counts <- table(pm25_data$City)
cities_with_multiple_rows <- names(city_counts[city_counts > 1])
city_timestamps <- aggregate(LastUpdated ~ City, data = pm25_data, FUN = function(x) length(unique(x)))
cities_with_multiple_times <- city_timestamps$City[city_timestamps$LastUpdated > 1]
valid_cities <- intersect(cities_with_multiple_rows, cities_with_multiple_times)
pm25_data <- pm25_data[pm25_data$City %in% valid_cities, ]
pm25_data <- pm25_data[grepl("[A-Za-z]", pm25_data$City), ]
ui <- shinydashboard::dashboardPage(
shinydashboard::dashboardHeader(title = "PM2.5 Air Quality in Europe"),
shinydashboard::dashboardSidebar(
selectInput("selected_city", "Select a city:", choices = sort(unique(pm25_data$City)))
),
shinydashboard::dashboardBody(
fluidRow(
shinydashboard::box(
title = "PM2.5 by City", status = "primary", solidHeader = TRUE, width = 6,
plotOutput("pm25_plot")
),
shinydashboard::box(
title = "Map of PM2.5 Stations", status = "info", solidHeader = TRUE, width = 6,
leaflet::leafletOutput("pm25_map", height = "500px")
)
)
)
)
server <- function(input, output, session) {
# Reactively filter data based on selected city
filtered <- reactive({
pm25_data[pm25_data$City == input$selected_city, ]
})
# Render the PM2.5 time series plot
output$pm25_plot <- renderPlot({
data <- filtered()
if (nrow(data) == 0) {
plot.new()
text(0.5, 0.5, "No data available for selected city", cex = 1.2)
} else if (nrow(data) == 1) {
ggplot(data, aes(x = LastUpdated, y = Value)) +
geom_point(color = "darkred", size = 3) +
labs(title = paste("PM2.5 on", input$selected_city),
x = "Date", y = "PM2.5 (µg/m³)") +
theme_minimal()
} else {
ggplot(data, aes(x = LastUpdated, y = Value)) +
geom_line(color = "darkred") +
labs(title = paste("PM2.5 Over Time in", input$selected_city),
x = "Date", y = "PM2.5 (µg/m³)") +
theme_minimal()
}
})
# Render the map with clickable markers
output$pm25_map <- leaflet::renderLeaflet({
leaflet::leaflet(pm25_data) %>%
leaflet::addTiles() %>%
leaflet::addCircleMarkers(
lng = ~Longitude,
lat = ~Latitude,
label = ~paste(City, "<br>PM2.5:", Value),
color = "red",
radius = 3,
layerId = ~City
)
})
# Allow clicking on map markers to update the city selector
observeEvent(input$pm25_map_marker_click, {
city_clicked <- input$pm25_map_marker_click$id
if (!is.null(city_clicked)) {
updateSelectInput(session, "selected_city", selected = city_clicked)
}
})
}
# Return the app object
shinyApp(ui = ui, server = server)
}
source("R/app.R")
startApp()
<project_root>/inst/extdata/openaq.csv
source("R/app.R")
startApp()
source("R/app.R")
startApp()
names(air_data)
air_data <- read.csv("inst/extdata/openaq.csv", sep = ";", stringsAsFactors = FALSE)
names(air_data)
View(air_data)
names(air_data)
air_data <- read.csv("inst/extdata/openaq.csv", sep = ",", header = FALSE, stringsAsFactors = FALSE)
str(air_data)
head(air_data)
View(air_data)
startApp <- function() {
air_data <- read.csv("inst/extdata/openaq.csv", sep = ",", header = FALSE, stringsAsFactors = FALSE)
names(air_data) <- c("Entity", "Code", "Year", "PM25")
coords <- strsplit(air_data$Coordinates, ",")
lat <- sapply(coords, function(x) as.numeric(x[1]))
lon <- sapply(coords, function(x) as.numeric(x[2]))
air_data$Latitude <- lat
air_data$Longitude <- lon
air_data$LastUpdated <- as.POSIXct(air_data$Last.Updated, format = "%Y-%m-%dT%H:%M:%S", tz = "UTC")
pm25_data <- air_data[air_data$Pollutant == "PM2.5", ]
pm25_data <- pm25_data[!is.na(pm25_data$City), ]
city_counts <- table(pm25_data$City)
cities_with_multiple_rows <- names(city_counts[city_counts > 1])
city_timestamps <- aggregate(LastUpdated ~ City, data = pm25_data, FUN = function(x) length(unique(x)))
cities_with_multiple_times <- city_timestamps$City[city_timestamps$LastUpdated > 1]
valid_cities <- intersect(cities_with_multiple_rows, cities_with_multiple_times)
pm25_data <- pm25_data[pm25_data$City %in% valid_cities, ]
pm25_data <- pm25_data[grepl("[A-Za-z]", pm25_data$City), ]
ui <- shinydashboard::dashboardPage(
shinydashboard::dashboardHeader(title = "PM2.5 Air Quality in Europe"),
shinydashboard::dashboardSidebar(
selectInput("selected_city", "Select a city:", choices = sort(unique(pm25_data$City)))
),
shinydashboard::dashboardBody(
fluidRow(
shinydashboard::box(
title = "PM2.5 by City", status = "primary", solidHeader = TRUE, width = 6,
plotOutput("pm25_plot")
),
shinydashboard::box(
title = "Map of PM2.5 Stations", status = "info", solidHeader = TRUE, width = 6,
leaflet::leafletOutput("pm25_map", height = "500px")
)
)
)
)
server <- function(input, output, session) {
# Reactively filter data based on selected city
filtered <- reactive({
pm25_data[pm25_data$City == input$selected_city, ]
})
# Render the PM2.5 time series plot
output$pm25_plot <- renderPlot({
data <- filtered()
if (nrow(data) == 0) {
plot.new()
text(0.5, 0.5, "No data available for selected city", cex = 1.2)
} else if (nrow(data) == 1) {
ggplot(data, aes(x = LastUpdated, y = Value)) +
geom_point(color = "darkred", size = 3) +
labs(title = paste("PM2.5 on", input$selected_city),
x = "Date", y = "PM2.5 (µg/m³)") +
theme_minimal()
} else {
ggplot(data, aes(x = LastUpdated, y = Value)) +
geom_line(color = "darkred") +
labs(title = paste("PM2.5 Over Time in", input$selected_city),
x = "Date", y = "PM2.5 (µg/m³)") +
theme_minimal()
}
})
# Render the map with clickable markers
output$pm25_map <- leaflet::renderLeaflet({
leaflet::leaflet(pm25_data) %>%
leaflet::addTiles() %>%
leaflet::addCircleMarkers(
lng = ~Longitude,
lat = ~Latitude,
label = ~paste(City, "<br>PM2.5:", Value),
color = "red",
radius = 3,
layerId = ~City
)
})
# Allow clicking on map markers to update the city selector
observeEvent(input$pm25_map_marker_click, {
city_clicked <- input$pm25_map_marker_click$id
if (!is.null(city_clicked)) {
updateSelectInput(session, "selected_city", selected = city_clicked)
}
})
}
# Return the app object
shinyApp(ui = ui, server = server)
}
shiny::runApp('R')
source("R/app.R")
startApp()
runApp('R')
startApp <- function() {
library(ggplot2)
air_data <- read.csv("inst/extdata/openaq.csv", sep = ",", header = FALSE, stringsAsFactors = FALSE)
names(air_data) <- c("Entity", "Code", "Year", "PM25")
# Define UI
ui <- fluidPage(
titlePanel("PM2.5 Trends by Country"),
sidebarLayout(
sidebarPanel(
selectInput("selected_country", "Select a country:",
choices = sort(unique(air_data$Entity)))
),
mainPanel(
plotOutput("pm25_plot")
)
)
)
# Define server logic
server <- function(input, output, session) {
filtered <- reactive({
air_data[air_data$Entity == input$selected_country, ]
})
output$pm25_plot <- renderPlot({
data <- filtered()
if (nrow(data) == 0) {
plot.new()
text(0.5, 0.5, "No data available", cex = 1.5)
} else {
ggplot(data, aes(x = Year, y = PM25)) +
geom_line(color = "darkred") +
geom_point(color = "darkred") +
labs(title = paste("PM2.5 Over Time in", input$selected_country),
x = "Year", y = "PM2.5 (µg/m³)") +
theme_minimal()
}
})
}
# Return the app
shinyApp(ui = ui, server = server)
}
source("R/app.R")
runApp('R')
startApp()
source("R/app.R")
startApp()
startApp()
startApp()
startApp()
startApp()
output$pm25_plot <- renderPlot({
data <- filtered()
if (nrow(data) == 0) {
plot.new()
text(0.5, 0.5, "No data available", cex = 1.5)
} else {
ggplot(data, aes(x = as.numeric(Year), y = PM25, group = 1)) +
geom_line(color = "darkred") +
geom_point(color = "darkred") +
labs(title = paste("PM2.5 Over Time in", input$selected_country),
x = "Year", y = "PM2.5 (µg/m³)") +
theme_minimal()
}
})
startApp()
startApp()
startApp()
startApp()
startApp()
startApp()
startApp()
runApp('R')
source("R/app.R")
startApp()
source("R/app.R")
startApp()
source("R/app.R")
startApp()
print(head(air_data))
source("R/app.R")
startApp()
source("R/app.R")
startApp()
library(usethis)
usethis::use_vignette("air-quality-report")
startApp()
